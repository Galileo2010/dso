# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  heroku: circleci/heroku@0.0.10
  docker: circleci/docker@0.5.20

jobs:
  build-image:
    executor: docker/docker
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: build docker image
        command: docker build -t registry.heroku.com/dso-container-demo/web .
    - run:
        name: save docker image
        command: docker save -o dso-image.tar registry.heroku.com/dso-container-demo/web:latest
    - persist_to_workspace:
        root: .
        paths:
        - ./dso-image.tar
    - run:
        name: list all files
        command: ls
    - run:
        name: print current workdir
        command: pwd

  build:
    docker:
    # specify the version you desire here
    # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
    - image: circleci/python:3.8.1

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
    - checkout

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "requirements.txt" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

    - run:
        name: install dependencies
        command: |
          python3 -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt

    - save_cache:
        paths:
        - ./venv
        key: v1-dependencies-{{ checksum "requirements.txt" }}

    # run tests!
    # this example uses Django's built-in test-runner
    # other common Python testing frameworks include pytest and nose
    # https://pytest.org
    # https://nose.readthedocs.io
    - run:
        name: run tests
        command: |
          . venv/bin/activate
          python manage.py test

    - store_artifacts:
        path: test-reports
        destination: test-reports
  deploy:
    executor: heroku/default
    steps:
    - checkout
    - heroku/deploy-via-git
  deploy-with-image:
    executor: docker/docker
    steps:
    - checkout
    - heroku/install
    - setup_remote_docker
    - run:
        name: login heroku container
        command: heroku container:login
    - run:
        name: buid and push image
        command: heroku container:push web -a dso-container-demo
    - run:
        name: deploy with image
        command: heroku container:release -a dso-container-demo web

workflows:
  version: 2
  build-deploy:
    jobs:
    - build-image
    - build:
        requires:
        - build-image
    - Deploy to DEV ?:
        type: approval
        requires:
        - build
    - deploy:
        requires:
        - Deploy to DEV ?
        filters:
          branches:
            only: master
    - deploy-with-image:
        requires:
        - Deploy to DEV ?
        filters:
          branches:
            only: master