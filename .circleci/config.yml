# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  heroku: circleci/heroku@0.0.10
  docker: circleci/docker@0.5.20

jobs:
  build-image:
    executor: docker/docker
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: build docker image
        command: docker build -t registry.heroku.com/dso-container-demo/web .
    - run:
        name: aquasec scan
        command: |
          mkdir aquasec-report
          cd aquasec-report
          MICROSCANNER_TOKEN=$MICROSCANNER_TOKEN ./grabhtml.sh registry.heroku.com/dso-container-demo/web > ../aquasec-report/reports.html
    - store_test_results:
        path: aquasec-report
    - run:
        name: save docker image
        command: docker save -o dso-image.tar registry.heroku.com/dso-container-demo/web:latest
    - persist_to_workspace:
        root: .
        paths:
        - ./dso-image.tar
  hawkeye-scan:
    executor: docker/docker
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: load local image
        command: docker load -i /tmp/workspace/dso-image.tar
    - run:
        name: hawkeye scan
        command: |
          docker run --name web-app registry.heroku.com/dso-container-demo/web:latest ls && docker cp web-app:/app .
          docker create -v /application --name tmp-app alpine:3.4 /bin/true
          docker cp app/. tmp-app:/application
          mkdir hawkeye-report
          docker run --rm --volumes-from tmp-app hawkeyesec/scanner-cli:latest -t /application -e settings.py | tee ./hawkeye-report/results.txt
          ls hawkeye-report
    - store_artifacts:
        path: hawkeye-report
  test-image:
    executor: docker/docker
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: load local image
        command: docker load -i /tmp/workspace/dso-image.tar
    - run:
        name: run tests
        command: docker run registry.heroku.com/dso-container-demo/web:latest python manage.py test
  deploy-DEV:
    executor: docker/docker
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - heroku/install
    - run:
        name: load local image
        command: docker load -i /tmp/workspace/dso-image.tar
    - run:
        name: login heroku container
        command: heroku container:login
    - run:
        name: docker push image
        command: docker push registry.heroku.com/dso-container-demo/web
    - run:
        name: deploy with image
        command: heroku container:release -a dso-container-demo web
  deploy-PROD:
    executor: docker/docker
    steps:
    - setup_remote_docker
    - heroku/install
    - run:
        name: login heroku container
        command: heroku container:login
    - run:
        name: pull heroku image
        command: heroku container:pull web -a dso-container-demo
    - run:
        name: docker tag & push image
        command: |
          docker tag registry.heroku.com/dso-container-demo/web:latest registry.heroku.com/dso-demo/web:latest
          docker push registry.heroku.com/dso-demo/web
    - run:
        name: deploy with image
        command: heroku container:release -a dso-demo web


workflows:
  version: 2
  build-deploy:
    jobs:
    - build-image
    - hawkeye-scan:
        requires:
        - build-image
    - test-image:
        requires:
        - hawkeye-scan
    - deploy-DEV:
        requires:
        - test-image
    - Deploy to PROD ?:
        type: approval
        requires:
        - deploy-DEV
    - deploy-PROD:
        requires:
        - Deploy to PROD ?
        filters:
          branches:
            only: master